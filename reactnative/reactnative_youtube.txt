INSTAL YARN PACKAGE

$ npm install -g create-react-native-app
$ create-react-native-app <project_name>

// install yarn package from download: https://yarnpkg.com/lang/en/docs/install/

$ yarn global add yarn-install

OR

npm install yarn -global
C:\Users\QUOC CUONG\AppData\Roaming\npm\yarn -> C:\Users\QUOC CUONG\AppData\Roam
ing\npm\node_modules\yarn\bin\yarn.js

===================================
$ yarn android

===================================
Babel command line interface and preset flow

$ yarn add --dev babel-cli babel-preset-flow

$ nano .babelrc

$ yarn add --dev flow-bin

$ yarn run flow

Wrong version of Flow. The config specifies version ^0.67.0 but this is version
0.69.0
Could not start Flow server!

$ yarn add --dev flow-bin@0.67.0

=> RESULT:
$ E:\learning\reactnative\tutorial\node_modules\.bin\flow
Launching Flow server for E:\learning\reactnative\tutorial
Spawned flow server (pid=8232)
Logs will go to C:\Users\QUOCCU~1\AppData\Local\Temp\flow\EzCzBlearningzBtivezBtutorial.log
Monitor logs will go to C:\Users\QUOCCU~1\AppData\Local\Temp\flow\EzCzBleBreactnativezBtutorial.monitor_log
←[0KNo errors!t. Server is handling a request (collating errors): |%)): |
Done in 34.10s.

===================================
Video 3.

export = public
default = make this class "default" when you import from other files

_ export default class HelloWorld extends Component { // public component

JSX = javascript extension
<Text>{ hello }</Text>

let = cannot re-assign to other type but can change value

===================================
04-Customize React Native components using Props

<Image source={ {uri:"link_image"} }></Image>
_ "source" = props of Image = "public property" of Image component

_ add 'width' and 'height' for show image
_ 'var': you can change the value to any type.

// object
var imageSource = { 
            uri:"https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/HONDA_ASIMO.jpg/200px-HONDA_ASIMO.jpg" 
};

// string
imageSource = 'abc';

_ 'const': cannot change value

_ class Greeting extends Component { // private component

_ 'props': public property

Props means "public property" in a React Native class. 
Developer can set props for a Component, but inside a Component, a props is read-only. Only change outside the Component.

===================================
05-State in React Native Component

_ this.state: private property, can change value. You can assign state only in constructor.
Use 'setState' in other place.

_ 'undefined is not an object (evaluating 'func.apply')' -> call variable not funtion.

var taskToDo = () => {...}
setInterval(taskToDo(), 1000)
-> setInterval(taskToDo, 1000)

===================================
06-Style a React Native component with StyleSheet

_ Array of styles: priority for last index
<Text style= { [styles.secondStyle, styles.textStyle] }>Hello!</Text>

===================================
07-Customize width and height props with Fixed and Flex dimensions

_ 'flex': flexible, a positive number

_ Column: top, center, bottom
_ Row: start, center, end

+ 'flexDirection': row
_ justifyContent -> Row: start, center, end
_ alignItems -> column: top, center, bottom

+ 'flexDirection': column
_ justifyContent -> column: top, center, bottom
_ alignItems -> Row: start, center, end

===================================
10-TextInput#1.Create a basic TextInput with Email and Password

_ render -> return (...);
_ arrow function -> return {...};

// ----
onChangeText={
    (text) => {
		// this.state: not allow
        this.setState(
            (previousState) => {
                return {
                    typeText: text
                 };
            }
         );
    }
}
				
// ---- babel
(function (text) {
    // this.state: not allow
    undefined.setState(function (previousState) {
        return {
            typeText: text
        };
    });
});

// ----	myself
function(text) {
	this.setState(previousState, text)
}

setState(previousState, text) {
	return this.typeText = text;
}

===================================
11-TextInput#2. Working with multiline TextInput and Keyboard

_ multiline={true}
_ editable={true}

_ Add listener keyboard:

componentWillMount() {
    this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', () => {
        this.setState(() => {
            return {typeText: 'keyboard is shown'}
        })
    });
    this.keyboardHideShowListener = Keyboard.addListener('keyboardDidHide', () => {
        this.setState(() => {
            return {typeText: 'keyboard is hide'}
        })
    });
}

componentWillUnmount() {
    this.keyboardDidShowListener.remove();
	this.keyboardHideShowListener.remove();
}

===================================
12-Touches and gestures#1. Display and handle a basic React Native Button

_ Install button
$ npm install react-native-button --save

*** Error:
_ Command run-android unrecognized. Did you mean to run this inside a react-native project?
=> I just ran "yarn" with no arguments and it fixed it.

===================================
13-Touches#2.TouchableHighlight, TouchableNativeFeedback,TouchableOpacity,TouchableWithoutFeedback

_ TouchableHighlight: highlight when touched

===================================
14-ScrollView#1.Draw a basic ScrollView with mixed Components

_ Dismiss keyboard in TextInput when drag scrollview:

keyboardDismissMode='on-drag'

_ Scale: only in IOS

maximumZoomScale={2}
minimumZoomScale={0.2}

_ Add style:
contentContainerStyle={{paddingLeft: 20}}
===================================
15-Horizontal ScrollView
<ScrollView
                horizontal={true}
                pagingEnabled={true}
                showsHorizontalScrollIndicator={true}
                onMomentumScrollBegin={() => {
                    //alert('Begin scrolling');
                }}
                onMomentumScrollEnd={() => {
                    //alert('End scrolling');
                }}
                onScroll={(event) => {
                    let logData = `Scrolled to x = ${event.nativeEvent.contentOffset.x}, y = ${event.nativeEvent.contentOffset.y}`;
                    console.log(logData);
                }}
                scrollEventThrottle={10} // get updating Cordinate each 10 miliseconds
            >

===================================
16-ScrollView#3.Create ScrollView with ViewPagerAndroid in React Native

	initialPage={0}
    onPageScroll={(event) => {
        //console.log(`offset = ${event.nativeEvent.offset}`)
    }}
    onPageScrollStateChanged={(state) => {
        //console.log(`scrolling state = ${state}`) // dragging, settling and iddle
    }}
    onPageSelected={(event) => {
        console.log(`scrolled to page = ${event.nativeEvent.position}`)
    }}

===================================
36-Redux in React Native #2. Create store, provider, actions of a todo list app

_ Action: must have 'type' and other properties
_ Reducers: contain function which change 'state'

tasks.push({}): is not correct. Becausue it mutates (changes) the state

=> create a seperate object from current tasks

return [
	... tasks,
	{
		...
	}
]

case TOGGLE_ONE_TASK:
            return tasks.map(task => 
                (task.taskId === action.taskId)
                ? {...task, completed: !task.completed}
                : task
            )
// first, iterate the task's array, using 'map;
// second, clone to a new object, then change

===================================
39-Redux in React Native #5. Add containers to the todo list Redux app

_ Container will:
+ Help component dispatch actions
+ convert component's state => prop
+ convert component's dispatch => prop

_ onClickAdd = a function props which dispatch action

===================================
47-ReactNavigation#2.Configuring the Header of StackNavigator

static navigationOptions = ({ navigation }) => {

        const { params = {} } = navigation.state;

        console.log(`params: ${JSON.stringify(params)}`);

        let headerTitle = 'Main';
        let headerTitleStyle = { color: 'red' };
        let headerRight = (<Button 
            containerStyle={styles.btnSaveContainerStyle}
            style={styles.btnSaveStyle}
            onPress={() => {
                params.onSave();
            }}
            >
                Save
            </Button>);
        let headerBackTitle = 'Back';
        return { headerTitle, headerTitleStyle, headerRight, headerBackTitle }
}

headerTintColor

===================================
49-ReactNavigation#4.Set up a screen with a drawer navigation using DrawerNavigator

<HeaderComponent {...this.props} />

=> bring all HomeComponent's props to HeaderComponent's props

===================================
17-FlatList

_ props:
+ data
+ renderItem

FlastListItem's props:
+ item
+ index

===================================
19-FlatList#3.Trượt để xóa một Item trong FlatList

_ import Swipeout from 'react-native-swipeout';

_ Declare swipe settings:

const swipeSettings = {
            autoClose: true,
            onClose: (secId, rowId, direction) => {

            },
            onOpen: (secId, rowId, direction) => {

            },
            right: [
                {
                    onPress: () => {
                        Alert.alert(
                            'Alert',
                            'Are you sure you want to delete?',
                            [
                                {text: 'No', onPress: () => console.log('Cancel Pressed'), style: 'cancel'},
                                {text: 'Yes', onPress: () => {
                                    flatListData.splice(this.props.index, 1);
                                }},
                            ],
                            { cancelable: true }
                        );
                    },
                    Text: 'Delete', type: 'delete'
                }
            ],
            rowId: this.props.index,
            sectionId: 1
        };

_ <Swipeout {...swipeSettings}>

_ Delete item in flatList:
flatListData.splice(this.props.index, 1);

===================================
21-FlatList#5.Present Modal and insert Data to existing FLatList

_ Modal's props:
+ ref
+ parentFlastList

_ Undefined is not an object ('this.refs.addModal') => "this" is NOT BasicFlatList's object

_ In constructor of BasicFlatList:

this._onPressAdd = this._onPressAdd.bind(this); // bind "this" to BasicFlatList's object

_ TextInput

onChangeText={(text) => this.setState({ newFoodName: text })}

_ Generate key random:

generateKey = (numberOfCharacters) => {
    return require('random-string')({length: numberOfCharacters});
}

_ New:
+ 'ref' to open, close Modal, refresh FlatList.
+ bind(this)
+ random-string
+ scrollToEnd

===================================
22-FlatList#6.Present Modal and update an existing FlatList's Item

_ Update FlatListItem automatically.

refreshFlatListItem() {
        this.setState((prevState) => {
            return {
                numberOfRefresh: prevState.numberOfRefresh + 1
            };
        });
}

* this.setState has arrow function -> return

_ this.setState({ activeRowKey: null }); -> set ojbect do not 'return'

_ Find index of item is updated:

var foundIndex = flatListData.findIndex(item => this.state.key == item.key);

